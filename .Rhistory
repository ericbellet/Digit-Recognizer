knit_with_parameters('~/Data Mining/Digit-Recognizer/Rmd/Presentacion.Rmd')
se realizaron pruebas basadas en aciertos
setwd("C:/Users/Leonardo/Documents/Data Mining/Digit-Recognizer")
source("src/functions.r")
##############################################
######################################################################################
#Installing packages depend
install("e1071")
######################################################################################
#Importing libraries
library(e1071)
######################################################################################
#Loading data set
######################################################################################
train = read.csv("data/train.csv")
######################################################################################
#Making a Sample
######################################################################################
#This must be checked, because we need to do a sub sample because SVM is too slow
set.seed(22)
subIndex = sample(nrow(train), floor(nrow(train) * 0.8), replace = F)
train = train[subIndex, ]
training.data = train[subIndex, ]
testing.data = train[-subIndex, ]
######################################################################################
#Converting labels to factor type
training.data$label = as.factor(training.data$label)
load(file = "models/model_linear.rda")
#Making  confussion matrix
confusionMatrix_linear = table(True = testing.data[,1],
Pred = predict(model_linear, testing.data[,-1], type = "class"))
#Calculating the hit rate
hitRate_linear = sumDiag(confusionMatrix_linear) / nrow(testing.data) * 100
#Calculating the miss rate
missRate_linear = 100 - hitRate_linear
#Showinng rates
confusionMatrix_linear
hitRate_linear
missRate_linear
##Linear SVM Kernel
######################################################################################
load(file = "models/model_linear.rda")
##Matriz de confusion
confusionMatrix_linear = table(True = testing.data[,1],
Pred = predict(model_linear, testing.data[,-1], type = "class"))
##Tasa de aciertos
hitRate_linear = sumDiag(confusionMatrix_linear) / nrow(testing.data) * 100
##Tasa de fallos
missRate_linear = 100 - hitRate_linear
confusionMatrix_linear
hitRate_linear
missRate_linear
##Linear SVM Kernel
######################################################################################
load(file = "models/model_linear.rda")
##Matriz de confusion
confusionMatrix_linear = table(True = testing.data[,1],
Pred = predict(model_linear, testing.data[,-1], type = "class"))
